import os
import logging
import pandas as pd
from datasets import Dataset
from typing import List, Optional
from pytz import timezone
from datetime import datetime
from datasets import load_dataset, concatenate_datasets

class TrainDatasetLoader:

    def __init__(self, random_seed: int, datasets: str, dataset_sizes: str, cache_dir: Optional[str]=None) :
        """
        Args:
            random_seed (int): random seed for reproducibility.
            datasets (str): comma-separated dataset names with [ and ]. e.g. "[alpaca, winogrande, arc]".
            dataset_sizes (str): comma-separated dataset sizes with [ and ]. e.g. "[all, 100, 60%]".
            cache_dir (Optional[str]): cache directory.
        """
        self.random_seed = random_seed
        self.datasets = datasets[1:-1].split(",")
        self.dataset_sizes = dataset_sizes[1:-1].split(",")
        self.cache_dir = cache_dir

        assert len(self.datasets) == len(self.dataset_sizes)
    
    def load(self):
        """Load training datasets."""
        datasets = {}
        for i, dataset_name in enumerate(self.datasets) :
            logging.info(f"Loading train dataset | {dataset_name}")

            # This dataset is a dataset of 52,000 instructions and demonstrations generated by OpenAI's text-davinci-003 engine. 
            if "alpaca" in dataset_name :
                dataset_path = "tatsu-lab/alpaca"
                if self.cache_dir is not None :
                    dataset = load_dataset(dataset_path, split="train", cache_dir=self.cache_dir)
                else :
                    dataset = load_dataset(dataset_path, split="train")

                dataset = dataset.shuffle(self.random_seed)
                
            # This dataset's goal is to choose the right option for a given sentence which requires commonsense reasoning. (Formulated as a fill-in-a-blank task with binary options)
            elif "winogrande" in dataset_name :
                assert dataset_name in ["winogrande_xs", "winogrande_s", "winogrande_m", "winogrande_l", "winogrande_xl"]

                dataset_path = "winogrande"
                if self.cache_dir is not None :
                    dataset = load_dataset(dataset_path, dataset_name, cache_dir=self.cache_dir)
                else :
                    dataset = load_dataset(dataset_path, dataset_name)

                dataset = dataset["train"]
                dataset = dataset.shuffle(self.random_seed)
                dataset_name = "winogrande"
                
            else :
                raise NameError("Not valid dataset name")
                
            if self.dataset_sizes[i] == "all" :
                num_data = len(dataset)
            elif self.dataset_sizes[i][-1] == "%" :
                num_data = int(len(dataset) * (float(self.dataset_sizes[i][:-1])/ 100))
            else :  
                num_data = int(self.dataset_sizes[i])

            dataset = dataset.select(range(num_data))
            datasets[dataset_name] = dataset
            
        return datasets

class EvalDatasetLoader:

    def __init__(self, datasets: str, cache_dir: Optional[str]=None) :
        """
        Args:
            datasets (str): comma-separated dataset names with [ and ]. e.g. "[alpaca, winogrande, arc]".
            cache_dir (Optional[str]): cache directory.
        """
        self.datasets = datasets[1:-1].split(",")
        self.cache_dir = cache_dir
    
    def load(self):
        """Load evaluation datasets."""
        datasets = {}
        for dataset_name in self.datasets :
            logging.info(f"Loading evaluation dataset | {dataset_name}")
                
            # This dataset's goal is to choose the right option for a given sentence which requires commonsense reasoning. (Formulated as a fill-in-a-blank task with binary options)
            if "winogrande" in dataset_name :
                assert dataset_name in ["winogrande_xs", "winogrande_s", "winogrande_m", "winogrande_l", "winogrande_xl"]

                dataset_path = "winogrande"
                if self.cache_dir is not None :
                    dataset = load_dataset(dataset_path, dataset_name, cache_dir=self.cache_dir)
                else :
                    dataset = load_dataset(dataset_path, dataset_name)

                dataset = dataset["validation"]
                dataset_name = "winogrande"
                
            else :
                raise NameError("Not valid dataset name")
                
            # Reset data_id for evaluation dataset
            if "id" in dataset.column_names :
                dataset = dataset.remove_columns(["id"])
            dataset_ids = [f"{dataset_name}-{i}" for i in range(len(dataset))]
            dataset = dataset.add_column("id", dataset_ids)

            datasets[dataset_name] = dataset
            
        return datasets