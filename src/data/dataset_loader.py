import os
import logging
import pandas as pd
from datasets import Dataset
from typing import List, Optional
from pytz import timezone
from datetime import datetime
from datasets import load_dataset, concatenate_datasets

class TrainDatasetLoader:

    def __init__(self, random_seed: int, datasets: str, dataset_sizes: str, cache_dir: Optional[str]=None) :
        """
        Args:
            random_seed (int): random seed for reproducibility.
            datasets (str): comma-separated dataset names with [ and ]. e.g. "[alpaca, winogrande, arc]".
            dataset_sizes (str): comma-separated dataset sizes with [ and ]. e.g. "[all, 100, 60%]".
            cache_dir (Optional[str]): cache directory.
        """
        self.random_seed = random_seed
        self.datasets = datasets[1:-1].split(",")
        self.dataset_sizes = dataset_sizes[1:-1].split(",")
        self.cache_dir = cache_dir

        assert len(self.datasets) == len(self.dataset_sizes)
    
    def load(self):
        """Load training datasets."""
        datasets = {}
        for i, dataset_name in enumerate(self.datasets) :
            logging.info(f"Loading instruction dataset | {dataset_name}")

            # This dataset is a dataset of 52,000 instructions and demonstrations generated by OpenAI's text-davinci-003 engine. 
            if "alpaca" in dataset_name :
                dataset_path = "tatsu-lab/alpaca"
                if self.cache_dir is not None :
                    dataset = load_dataset(dataset_path, split="train", cache_dir=self.cache_dir)
                else :
                    dataset = load_dataset(dataset_path, split="train")

                dataset = dataset.shuffle(self.random_seed)
                
            if self.dataset_sizes[i] == "all" :
                num_data = len(dataset)
            elif self.dataset_sizes[i][-1] == "%" :
                num_data = int(len(dataset) * (float(self.dataset_sizes[i][:-1])/ 100))
            else :  
                num_data = int(self.dataset_sizes[i])

            dataset = dataset.select(range(num_data))
            datasets[dataset_name] = dataset
            
        return datasets
